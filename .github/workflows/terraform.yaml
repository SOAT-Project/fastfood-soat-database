name: "Terraform Workflow"

on: 
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
    secrets:
      aws-assume-role-arn:
        required: true
      aws-region:
        required: true
      aws-statefile-s3-bucket:
        required: true
      aws-lock-dynamodb-table:
        required: true
      db_name:
        required: true
      db_username:
        required: true
      db_password:
        required: true
      allowed_cidr:
        required: true
    outputs:
      rds_endpoint:
        description: "O endpoint do RDS gerado pelo Terraform"
        value: jobs.terraform.outputs.rds_endpoint

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    outputs:
      rds_endpoint: ${{ steps.get-output.outputs.rds_endpoint }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws-assume-role-arn }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ secrets.aws-region }}

      - name: Read destroy config
        id: read-destroy-config
        run: |
          DESTROY="$(jq -r '.${{ inputs.environment }}' ./infra/terraform/destroy_config.json)"
          echo "destroy=$(echo $DESTROY)" >> $GITHUB_OUTPUT

      - name: Terraform Init
        run: |
          cd infra/terraform && terraform init \
            -backend-config="bucket=${{ secrets.aws-statefile-s3-bucket }}" \
            -backend-config="key=${{ github.event.repository.name }}" \
            -backend-config="region=${{ secrets.aws-region }}" \
            -backend-config="dynamodb_table=${{ secrets.aws-lock-dynamodb-table }}" \

      - name: Terraform Validate
        run: cd infra/terraform && terraform validate

      - name: Terraform Destroy
        if: steps.read-destroy-config.outputs.destroy == 'true'
        id: terraform-destroy
        env:
          TF_VAR_db_name: ${{ secrets.db_name }}
          TF_VAR_db_username: ${{ secrets.db_username }}
          TF_VAR_db_password: ${{ secrets.db_password }}
          TF_VAR_allowed_cidr: ${{ secrets.allowed_cidr }}
        run: cd infra/terraform &&
          terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }} &&
          terraform destroy -var-file="./envs/${{ inputs.environment }}/terraform.tfvars" -auto-approve

      - name: Terraform Plan
        if: steps.read-destroy-config.outputs.destroy != 'true'
        id: terraform-plan
        env:
          TF_VAR_db_name: ${{ secrets.db_name }}
          TF_VAR_db_username: ${{ secrets.db_username }}
          TF_VAR_db_password: ${{ secrets.db_password }}
          TF_VAR_allowed_cidr: ${{ secrets.allowed_cidr }}
        run: cd infra/terraform &&
          terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }} &&
          terraform plan -var-file="./envs/${{ inputs.environment }}/terraform.tfvars" -out="${{ inputs.environment }}.plan"

      - name: Terraform Apply
        if: steps.read-destroy-config.outputs.destroy != 'true'
        id: terraform-apply
        env:
          TF_VAR_db_name: ${{ secrets.db_name }}
          TF_VAR_db_username: ${{ secrets.db_username }}
          TF_VAR_db_password: ${{ secrets.db_password }}
          TF_VAR_allowed_cidr: ${{ secrets.allowed_cidr }}
        run: cd infra/terraform &&
          terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }} &&
          terraform apply "${{ inputs.environment }}.plan"

      - name: Get Terraform Output
        id: get-output
        if: steps.read-destroy-config.outputs.destroy != 'true'
        run: |
          cd infra/terraform

          RDS_ENDPOINT=$(terraform output -raw rds_endpoint)
          
          echo "rds_endpoint=$RDS_ENDPOINT" >> $GITHUB_OUTPUT

  run-scripts:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install dependencies and Run Python Script
        env:
          DB_HOST: ${{ needs.terraform.outputs.rds_endpoint }}
          
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USERNAME }}
          DB_PASS: ${{ secrets.DB_PASSWORD }}
        run: |
          cd infra/scripts

          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
          echo "RDS Endpoint capturado: $DB_HOST"

          echo "Endpoint=${{ needs.terraform.outputs.rds_endpoint }}"
          
          python run_scripts.py
